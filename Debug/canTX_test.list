
canTX_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001584  08001584  00011584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015b4  080015b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080015b4  080015b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015b4  080015b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015b4  080015b4  000115b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015b8  080015b8  000115b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080015bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080015c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080015c8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000045df  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001007  00000000  00000000  00024613  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b0  00000000  00000000  00025620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000418  00000000  00000000  00025ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000137e9  00000000  00000000  00025ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000046e0  00000000  00000000  000396d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006abb9  00000000  00000000  0003ddb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a896a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f20  00000000  00000000  000a89e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800156c 	.word	0x0800156c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800156c 	.word	0x0800156c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f928 	bl	8000478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81f 	bl	800026a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f866 	bl	80002fc <MX_GPIO_Init>
  HAL_Delay(10);
 8000230:	200a      	movs	r0, #10
 8000232:	f000 f985 	bl	8000540 <HAL_Delay>
  //MX_CAN_Init();

  /* USER CODE BEGIN 2 */
  //CAN_config();
  HAL_Delay(10);
 8000236:	200a      	movs	r0, #10
 8000238:	f000 f982 	bl	8000540 <HAL_Delay>
  //HAL_CAN_MspInit(&hcan);
  HAL_Delay(10);
 800023c:	200a      	movs	r0, #10
 800023e:	f000 f97f 	bl	8000540 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_CAN_AddTxMessage(&hcan, &Txheader, Txdata, &TxMailbox);
	  HAL_Delay(100);
 8000242:	2064      	movs	r0, #100	; 0x64
 8000244:	f000 f97c 	bl	8000540 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	015a      	lsls	r2, r3, #5
 800024c:	2390      	movs	r3, #144	; 0x90
 800024e:	05db      	lsls	r3, r3, #23
 8000250:	0011      	movs	r1, r2
 8000252:	0018      	movs	r0, r3
 8000254:	f000 fc64 	bl	8000b20 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	011a      	lsls	r2, r3, #4
 800025c:	2390      	movs	r3, #144	; 0x90
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	0011      	movs	r1, r2
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fc5c 	bl	8000b20 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000268:	e7eb      	b.n	8000242 <main+0x22>

0800026a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026a:	b590      	push	{r4, r7, lr}
 800026c:	b093      	sub	sp, #76	; 0x4c
 800026e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000270:	2414      	movs	r4, #20
 8000272:	193b      	adds	r3, r7, r4
 8000274:	0018      	movs	r0, r3
 8000276:	2334      	movs	r3, #52	; 0x34
 8000278:	001a      	movs	r2, r3
 800027a:	2100      	movs	r1, #0
 800027c:	f001 f96e 	bl	800155c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	0018      	movs	r0, r3
 8000284:	2310      	movs	r3, #16
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f001 f967 	bl	800155c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028e:	0021      	movs	r1, r4
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2201      	movs	r2, #1
 8000294:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2201      	movs	r2, #1
 800029a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2202      	movs	r2, #2
 80002a0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	0252      	lsls	r2, r2, #9
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2280      	movs	r2, #128	; 0x80
 80002ae:	0352      	lsls	r2, r2, #13
 80002b0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2200      	movs	r2, #0
 80002b6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fc4c 	bl	8000b58 <HAL_RCC_OscConfig>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002c4:	f000 f840 	bl	8000348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2207      	movs	r2, #7
 80002cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2202      	movs	r2, #2
 80002d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2101      	movs	r1, #1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 ffbd 	bl	8001264 <HAL_RCC_ClockConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002ee:	f000 f82b 	bl	8000348 <Error_Handler>
  }
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b013      	add	sp, #76	; 0x4c
 80002f8:	bd90      	pop	{r4, r7, pc}
	...

080002fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_GPIO_Init+0x48>)
 8000304:	695a      	ldr	r2, [r3, #20]
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_GPIO_Init+0x48>)
 8000308:	2180      	movs	r1, #128	; 0x80
 800030a:	03c9      	lsls	r1, r1, #15
 800030c:	430a      	orrs	r2, r1
 800030e:	615a      	str	r2, [r3, #20]
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_GPIO_Init+0x48>)
 8000312:	695a      	ldr	r2, [r3, #20]
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	03db      	lsls	r3, r3, #15
 8000318:	4013      	ands	r3, r2
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_GPIO_Init+0x48>)
 8000320:	695a      	ldr	r2, [r3, #20]
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_GPIO_Init+0x48>)
 8000324:	2180      	movs	r1, #128	; 0x80
 8000326:	0289      	lsls	r1, r1, #10
 8000328:	430a      	orrs	r2, r1
 800032a:	615a      	str	r2, [r3, #20]
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <MX_GPIO_Init+0x48>)
 800032e:	695a      	ldr	r2, [r3, #20]
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	029b      	lsls	r3, r3, #10
 8000334:	4013      	ands	r3, r2
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	683b      	ldr	r3, [r7, #0]

}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	b002      	add	sp, #8
 8000340:	bd80      	pop	{r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	40021000 	.word	0x40021000

08000348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <HAL_MspInit+0x44>)
 800035c:	699a      	ldr	r2, [r3, #24]
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <HAL_MspInit+0x44>)
 8000360:	2101      	movs	r1, #1
 8000362:	430a      	orrs	r2, r1
 8000364:	619a      	str	r2, [r3, #24]
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <HAL_MspInit+0x44>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	2201      	movs	r2, #1
 800036c:	4013      	ands	r3, r2
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <HAL_MspInit+0x44>)
 8000374:	69da      	ldr	r2, [r3, #28]
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <HAL_MspInit+0x44>)
 8000378:	2180      	movs	r1, #128	; 0x80
 800037a:	0549      	lsls	r1, r1, #21
 800037c:	430a      	orrs	r2, r1
 800037e:	61da      	str	r2, [r3, #28]
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <HAL_MspInit+0x44>)
 8000382:	69da      	ldr	r2, [r3, #28]
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	055b      	lsls	r3, r3, #21
 8000388:	4013      	ands	r3, r2
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b002      	add	sp, #8
 8000394:	bd80      	pop	{r7, pc}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	40021000 	.word	0x40021000

0800039c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003a0:	46c0      	nop			; (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003aa:	e7fe      	b.n	80003aa <HardFault_Handler+0x4>

080003ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003b0:	46c0      	nop			; (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c4:	f000 f8a0 	bl	8000508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c8:	46c0      	nop			; (mov r8, r8)
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80003d4:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <CEC_CAN_IRQHandler+0x14>)
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 f8d4 	bl	8000584 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	20000028 	.word	0x20000028

080003e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	4813      	ldr	r0, [pc, #76]	; (8000444 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80003f8:	4813      	ldr	r0, [pc, #76]	; (8000448 <LoopForever+0x6>)
    LDR R1, [R0]
 80003fa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80003fc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80003fe:	4a13      	ldr	r2, [pc, #76]	; (800044c <LoopForever+0xa>)
    CMP R1, R2
 8000400:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000402:	d105      	bne.n	8000410 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000404:	4812      	ldr	r0, [pc, #72]	; (8000450 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000406:	4913      	ldr	r1, [pc, #76]	; (8000454 <LoopForever+0x12>)
    STR R1, [R0]
 8000408:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800040a:	4813      	ldr	r0, [pc, #76]	; (8000458 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800040c:	4913      	ldr	r1, [pc, #76]	; (800045c <LoopForever+0x1a>)
    STR R1, [R0]
 800040e:	6001      	str	r1, [r0, #0]

08000410 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	4813      	ldr	r0, [pc, #76]	; (8000460 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000412:	4914      	ldr	r1, [pc, #80]	; (8000464 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000414:	4a14      	ldr	r2, [pc, #80]	; (8000468 <LoopForever+0x26>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a11      	ldr	r2, [pc, #68]	; (800046c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000428:	4c11      	ldr	r4, [pc, #68]	; (8000470 <LoopForever+0x2e>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000436:	f7ff ffd7 	bl	80003e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800043a:	f001 f86b 	bl	8001514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043e:	f7ff feef 	bl	8000220 <main>

08000442 <LoopForever>:

LoopForever:
    b LoopForever
 8000442:	e7fe      	b.n	8000442 <LoopForever>
  ldr   r0, =_estack
 8000444:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000448:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800044c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000450:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000454:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000458:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800045c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000468:	080015bc 	.word	0x080015bc
  ldr r2, =_sbss
 800046c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000470:	20000078 	.word	0x20000078

08000474 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC1_IRQHandler>
	...

08000478 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <HAL_Init+0x24>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <HAL_Init+0x24>)
 8000482:	2110      	movs	r1, #16
 8000484:	430a      	orrs	r2, r1
 8000486:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000488:	2000      	movs	r0, #0
 800048a:	f000 f809 	bl	80004a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800048e:	f7ff ff61 	bl	8000354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000492:	2300      	movs	r3, #0
}
 8000494:	0018      	movs	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40022000 	.word	0x40022000

080004a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <HAL_InitTick+0x5c>)
 80004aa:	681c      	ldr	r4, [r3, #0]
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <HAL_InitTick+0x60>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	0019      	movs	r1, r3
 80004b2:	23fa      	movs	r3, #250	; 0xfa
 80004b4:	0098      	lsls	r0, r3, #2
 80004b6:	f7ff fe27 	bl	8000108 <__udivsi3>
 80004ba:	0003      	movs	r3, r0
 80004bc:	0019      	movs	r1, r3
 80004be:	0020      	movs	r0, r4
 80004c0:	f7ff fe22 	bl	8000108 <__udivsi3>
 80004c4:	0003      	movs	r3, r0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fb1d 	bl	8000b06 <HAL_SYSTICK_Config>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80004d0:	2301      	movs	r3, #1
 80004d2:	e00f      	b.n	80004f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d80b      	bhi.n	80004f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	2301      	movs	r3, #1
 80004de:	425b      	negs	r3, r3
 80004e0:	2200      	movs	r2, #0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fafa 	bl	8000adc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_InitTick+0x64>)
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	e000      	b.n	80004f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	0018      	movs	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b003      	add	sp, #12
 80004fa:	bd90      	pop	{r4, r7, pc}
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000008 	.word	0x20000008
 8000504:	20000004 	.word	0x20000004

08000508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <HAL_IncTick+0x1c>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	001a      	movs	r2, r3
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_IncTick+0x20>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	18d2      	adds	r2, r2, r3
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <HAL_IncTick+0x20>)
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000008 	.word	0x20000008
 8000528:	20000074 	.word	0x20000074

0800052c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  return uwTick;
 8000530:	4b02      	ldr	r3, [pc, #8]	; (800053c <HAL_GetTick+0x10>)
 8000532:	681b      	ldr	r3, [r3, #0]
}
 8000534:	0018      	movs	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	20000074 	.word	0x20000074

08000540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000548:	f7ff fff0 	bl	800052c <HAL_GetTick>
 800054c:	0003      	movs	r3, r0
 800054e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	d005      	beq.n	8000566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <HAL_Delay+0x40>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	001a      	movs	r2, r3
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	189b      	adds	r3, r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	f7ff ffe0 	bl	800052c <HAL_GetTick>
 800056c:	0002      	movs	r2, r0
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	68fa      	ldr	r2, [r7, #12]
 8000574:	429a      	cmp	r2, r3
 8000576:	d8f7      	bhi.n	8000568 <HAL_Delay+0x28>
  {
  }
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b004      	add	sp, #16
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000008 	.word	0x20000008

08000584 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	2201      	movs	r2, #1
 80005c4:	4013      	ands	r3, r2
 80005c6:	d100      	bne.n	80005ca <HAL_CAN_IRQHandler+0x46>
 80005c8:	e084      	b.n	80006d4 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	2201      	movs	r2, #1
 80005ce:	4013      	ands	r3, r2
 80005d0:	d024      	beq.n	800061c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2201      	movs	r2, #1
 80005d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	2202      	movs	r2, #2
 80005de:	4013      	ands	r3, r2
 80005e0:	d004      	beq.n	80005ec <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 f97e 	bl	80008e6 <HAL_CAN_TxMailbox0CompleteCallback>
 80005ea:	e017      	b.n	800061c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	2204      	movs	r2, #4
 80005f0:	4013      	ands	r3, r2
 80005f2:	d005      	beq.n	8000600 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80005f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	0112      	lsls	r2, r2, #4
 80005fa:	4313      	orrs	r3, r2
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
 80005fe:	e00d      	b.n	800061c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	2208      	movs	r2, #8
 8000604:	4013      	ands	r3, r2
 8000606:	d005      	beq.n	8000614 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	0152      	lsls	r2, r2, #5
 800060e:	4313      	orrs	r3, r2
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
 8000612:	e003      	b.n	800061c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	0018      	movs	r0, r3
 8000618:	f000 f97d 	bl	8000916 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800061c:	69ba      	ldr	r2, [r7, #24]
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4013      	ands	r3, r2
 8000624:	d028      	beq.n	8000678 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	0052      	lsls	r2, r2, #1
 800062e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000630:	69ba      	ldr	r2, [r7, #24]
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4013      	ands	r3, r2
 8000638:	d004      	beq.n	8000644 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	0018      	movs	r0, r3
 800063e:	f000 f95a 	bl	80008f6 <HAL_CAN_TxMailbox1CompleteCallback>
 8000642:	e019      	b.n	8000678 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	4013      	ands	r3, r2
 800064c:	d005      	beq.n	800065a <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	0192      	lsls	r2, r2, #6
 8000654:	4313      	orrs	r3, r2
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
 8000658:	e00e      	b.n	8000678 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800065a:	69ba      	ldr	r2, [r7, #24]
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	4013      	ands	r3, r2
 8000662:	d005      	beq.n	8000670 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	01d2      	lsls	r2, r2, #7
 800066a:	4313      	orrs	r3, r2
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
 800066e:	e003      	b.n	8000678 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	0018      	movs	r0, r3
 8000674:	f000 f957 	bl	8000926 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000678:	69ba      	ldr	r2, [r7, #24]
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	025b      	lsls	r3, r3, #9
 800067e:	4013      	ands	r3, r2
 8000680:	d028      	beq.n	80006d4 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	0252      	lsls	r2, r2, #9
 800068a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	029b      	lsls	r3, r3, #10
 8000692:	4013      	ands	r3, r2
 8000694:	d004      	beq.n	80006a0 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	0018      	movs	r0, r3
 800069a:	f000 f934 	bl	8000906 <HAL_CAN_TxMailbox2CompleteCallback>
 800069e:	e019      	b.n	80006d4 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80006a0:	69ba      	ldr	r2, [r7, #24]
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	02db      	lsls	r3, r3, #11
 80006a6:	4013      	ands	r3, r2
 80006a8:	d005      	beq.n	80006b6 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	0212      	lsls	r2, r2, #8
 80006b0:	4313      	orrs	r3, r2
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
 80006b4:	e00e      	b.n	80006d4 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80006b6:	69ba      	ldr	r2, [r7, #24]
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	031b      	lsls	r3, r3, #12
 80006bc:	4013      	ands	r3, r2
 80006be:	d005      	beq.n	80006cc <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	0252      	lsls	r2, r2, #9
 80006c6:	4313      	orrs	r3, r2
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ca:	e003      	b.n	80006d4 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 f931 	bl	8000936 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80006d4:	6a3b      	ldr	r3, [r7, #32]
 80006d6:	2208      	movs	r2, #8
 80006d8:	4013      	ands	r3, r2
 80006da:	d00c      	beq.n	80006f6 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	2210      	movs	r2, #16
 80006e0:	4013      	ands	r3, r2
 80006e2:	d008      	beq.n	80006f6 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	4313      	orrs	r3, r2
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2210      	movs	r2, #16
 80006f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	2204      	movs	r2, #4
 80006fa:	4013      	ands	r3, r2
 80006fc:	d00b      	beq.n	8000716 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	2208      	movs	r2, #8
 8000702:	4013      	ands	r3, r2
 8000704:	d007      	beq.n	8000716 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2208      	movs	r2, #8
 800070c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	0018      	movs	r0, r3
 8000712:	f000 f920 	bl	8000956 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000716:	6a3b      	ldr	r3, [r7, #32]
 8000718:	2202      	movs	r2, #2
 800071a:	4013      	ands	r3, r2
 800071c:	d009      	beq.n	8000732 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	2203      	movs	r2, #3
 8000726:	4013      	ands	r3, r2
 8000728:	d003      	beq.n	8000732 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	0018      	movs	r0, r3
 800072e:	f000 f90a 	bl	8000946 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	2240      	movs	r2, #64	; 0x40
 8000736:	4013      	ands	r3, r2
 8000738:	d00c      	beq.n	8000754 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	2210      	movs	r2, #16
 800073e:	4013      	ands	r3, r2
 8000740:	d008      	beq.n	8000754 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	00d2      	lsls	r2, r2, #3
 8000748:	4313      	orrs	r3, r2
 800074a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2210      	movs	r2, #16
 8000752:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000754:	6a3b      	ldr	r3, [r7, #32]
 8000756:	2220      	movs	r2, #32
 8000758:	4013      	ands	r3, r2
 800075a:	d00b      	beq.n	8000774 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	2208      	movs	r2, #8
 8000760:	4013      	ands	r3, r2
 8000762:	d007      	beq.n	8000774 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2208      	movs	r2, #8
 800076a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f901 	bl	8000976 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	2210      	movs	r2, #16
 8000778:	4013      	ands	r3, r2
 800077a:	d009      	beq.n	8000790 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	691b      	ldr	r3, [r3, #16]
 8000782:	2203      	movs	r2, #3
 8000784:	4013      	ands	r3, r2
 8000786:	d003      	beq.n	8000790 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f8eb 	bl	8000966 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000790:	6a3a      	ldr	r2, [r7, #32]
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	029b      	lsls	r3, r3, #10
 8000796:	4013      	ands	r3, r2
 8000798:	d00b      	beq.n	80007b2 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	2210      	movs	r2, #16
 800079e:	4013      	ands	r3, r2
 80007a0:	d007      	beq.n	80007b2 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2210      	movs	r2, #16
 80007a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 f8ea 	bl	8000986 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80007b2:	6a3a      	ldr	r2, [r7, #32]
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	025b      	lsls	r3, r3, #9
 80007b8:	4013      	ands	r3, r2
 80007ba:	d00b      	beq.n	80007d4 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	2208      	movs	r2, #8
 80007c0:	4013      	ands	r3, r2
 80007c2:	d007      	beq.n	80007d4 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2208      	movs	r2, #8
 80007ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 f8e1 	bl	8000996 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80007d4:	6a3a      	ldr	r2, [r7, #32]
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	4013      	ands	r3, r2
 80007dc:	d100      	bne.n	80007e0 <HAL_CAN_IRQHandler+0x25c>
 80007de:	e071      	b.n	80008c4 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	2204      	movs	r2, #4
 80007e4:	4013      	ands	r3, r2
 80007e6:	d100      	bne.n	80007ea <HAL_CAN_IRQHandler+0x266>
 80007e8:	e068      	b.n	80008bc <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80007ea:	6a3a      	ldr	r2, [r7, #32]
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4013      	ands	r3, r2
 80007f2:	d007      	beq.n	8000804 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2201      	movs	r2, #1
 80007f8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80007fa:	d003      	beq.n	8000804 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	2201      	movs	r2, #1
 8000800:	4313      	orrs	r3, r2
 8000802:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000804:	6a3a      	ldr	r2, [r7, #32]
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4013      	ands	r3, r2
 800080c:	d007      	beq.n	800081e <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2202      	movs	r2, #2
 8000812:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000814:	d003      	beq.n	800081e <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	2202      	movs	r2, #2
 800081a:	4313      	orrs	r3, r2
 800081c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800081e:	6a3a      	ldr	r2, [r7, #32]
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	4013      	ands	r3, r2
 8000826:	d007      	beq.n	8000838 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2204      	movs	r2, #4
 800082c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800082e:	d003      	beq.n	8000838 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000832:	2204      	movs	r2, #4
 8000834:	4313      	orrs	r3, r2
 8000836:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000838:	6a3a      	ldr	r2, [r7, #32]
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4013      	ands	r3, r2
 8000840:	d03c      	beq.n	80008bc <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2270      	movs	r2, #112	; 0x70
 8000846:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000848:	d038      	beq.n	80008bc <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2270      	movs	r2, #112	; 0x70
 800084e:	4013      	ands	r3, r2
 8000850:	2b30      	cmp	r3, #48	; 0x30
 8000852:	d016      	beq.n	8000882 <HAL_CAN_IRQHandler+0x2fe>
 8000854:	d804      	bhi.n	8000860 <HAL_CAN_IRQHandler+0x2dc>
 8000856:	2b10      	cmp	r3, #16
 8000858:	d009      	beq.n	800086e <HAL_CAN_IRQHandler+0x2ea>
 800085a:	2b20      	cmp	r3, #32
 800085c:	d00c      	beq.n	8000878 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800085e:	e025      	b.n	80008ac <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8000860:	2b50      	cmp	r3, #80	; 0x50
 8000862:	d018      	beq.n	8000896 <HAL_CAN_IRQHandler+0x312>
 8000864:	2b60      	cmp	r3, #96	; 0x60
 8000866:	d01b      	beq.n	80008a0 <HAL_CAN_IRQHandler+0x31c>
 8000868:	2b40      	cmp	r3, #64	; 0x40
 800086a:	d00f      	beq.n	800088c <HAL_CAN_IRQHandler+0x308>
            break;
 800086c:	e01e      	b.n	80008ac <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	2208      	movs	r2, #8
 8000872:	4313      	orrs	r3, r2
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000876:	e019      	b.n	80008ac <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	2210      	movs	r2, #16
 800087c:	4313      	orrs	r3, r2
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000880:	e014      	b.n	80008ac <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000884:	2220      	movs	r2, #32
 8000886:	4313      	orrs	r3, r2
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800088a:	e00f      	b.n	80008ac <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 800088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088e:	2240      	movs	r2, #64	; 0x40
 8000890:	4313      	orrs	r3, r2
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000894:	e00a      	b.n	80008ac <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	4313      	orrs	r3, r2
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800089e:	e005      	b.n	80008ac <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	0052      	lsls	r2, r2, #1
 80008a6:	4313      	orrs	r3, r2
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80008aa:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	699a      	ldr	r2, [r3, #24]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2170      	movs	r1, #112	; 0x70
 80008b8:	438a      	bics	r2, r1
 80008ba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2204      	movs	r2, #4
 80008c2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d009      	beq.n	80008de <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	431a      	orrs	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 f864 	bl	80009a6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b00a      	add	sp, #40	; 0x28
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	0002      	movs	r2, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b7f      	cmp	r3, #127	; 0x7f
 80009cc:	d828      	bhi.n	8000a20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ce:	4a2f      	ldr	r2, [pc, #188]	; (8000a8c <__NVIC_SetPriority+0xd4>)
 80009d0:	1dfb      	adds	r3, r7, #7
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b25b      	sxtb	r3, r3
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	33c0      	adds	r3, #192	; 0xc0
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	589b      	ldr	r3, [r3, r2]
 80009de:	1dfa      	adds	r2, r7, #7
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	0011      	movs	r1, r2
 80009e4:	2203      	movs	r2, #3
 80009e6:	400a      	ands	r2, r1
 80009e8:	00d2      	lsls	r2, r2, #3
 80009ea:	21ff      	movs	r1, #255	; 0xff
 80009ec:	4091      	lsls	r1, r2
 80009ee:	000a      	movs	r2, r1
 80009f0:	43d2      	mvns	r2, r2
 80009f2:	401a      	ands	r2, r3
 80009f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	019b      	lsls	r3, r3, #6
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	401a      	ands	r2, r3
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	0018      	movs	r0, r3
 8000a04:	2303      	movs	r3, #3
 8000a06:	4003      	ands	r3, r0
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0c:	481f      	ldr	r0, [pc, #124]	; (8000a8c <__NVIC_SetPriority+0xd4>)
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	089b      	lsrs	r3, r3, #2
 8000a16:	430a      	orrs	r2, r1
 8000a18:	33c0      	adds	r3, #192	; 0xc0
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a1e:	e031      	b.n	8000a84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <__NVIC_SetPriority+0xd8>)
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	0019      	movs	r1, r3
 8000a28:	230f      	movs	r3, #15
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	3b08      	subs	r3, #8
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3306      	adds	r3, #6
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	18d3      	adds	r3, r2, r3
 8000a36:	3304      	adds	r3, #4
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	1dfa      	adds	r2, r7, #7
 8000a3c:	7812      	ldrb	r2, [r2, #0]
 8000a3e:	0011      	movs	r1, r2
 8000a40:	2203      	movs	r2, #3
 8000a42:	400a      	ands	r2, r1
 8000a44:	00d2      	lsls	r2, r2, #3
 8000a46:	21ff      	movs	r1, #255	; 0xff
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	000a      	movs	r2, r1
 8000a4c:	43d2      	mvns	r2, r2
 8000a4e:	401a      	ands	r2, r3
 8000a50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	019b      	lsls	r3, r3, #6
 8000a56:	22ff      	movs	r2, #255	; 0xff
 8000a58:	401a      	ands	r2, r3
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	0018      	movs	r0, r3
 8000a60:	2303      	movs	r3, #3
 8000a62:	4003      	ands	r3, r0
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <__NVIC_SetPriority+0xd8>)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	001c      	movs	r4, r3
 8000a70:	230f      	movs	r3, #15
 8000a72:	4023      	ands	r3, r4
 8000a74:	3b08      	subs	r3, #8
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	3306      	adds	r3, #6
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	18c3      	adds	r3, r0, r3
 8000a80:	3304      	adds	r3, #4
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b003      	add	sp, #12
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	4a0c      	ldr	r2, [pc, #48]	; (8000ad4 <SysTick_Config+0x40>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d901      	bls.n	8000aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e010      	b.n	8000acc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <SysTick_Config+0x44>)
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	3a01      	subs	r2, #1
 8000ab0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	425b      	negs	r3, r3
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ff7d 	bl	80009b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SysTick_Config+0x44>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SysTick_Config+0x44>)
 8000ac6:	2207      	movs	r2, #7
 8000ac8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	00ffffff 	.word	0x00ffffff
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	1c02      	adds	r2, r0, #0
 8000aec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	0011      	movs	r1, r2
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff ff5d 	bl	80009b8 <__NVIC_SetPriority>
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b004      	add	sp, #16
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff ffbf 	bl	8000a94 <SysTick_Config>
 8000b16:	0003      	movs	r3, r0
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	000a      	movs	r2, r1
 8000b2a:	1cbb      	adds	r3, r7, #2
 8000b2c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b34:	1cbb      	adds	r3, r7, #2
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	041a      	lsls	r2, r3, #16
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	1cb9      	adds	r1, r7, #2
 8000b44:	8809      	ldrh	r1, [r1, #0]
 8000b46:	400b      	ands	r3, r1
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	619a      	str	r2, [r3, #24]
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b004      	add	sp, #16
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d102      	bne.n	8000b6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f000 fb76 	bl	8001258 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2201      	movs	r2, #1
 8000b72:	4013      	ands	r3, r2
 8000b74:	d100      	bne.n	8000b78 <HAL_RCC_OscConfig+0x20>
 8000b76:	e08e      	b.n	8000c96 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b78:	4bc5      	ldr	r3, [pc, #788]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	220c      	movs	r2, #12
 8000b7e:	4013      	ands	r3, r2
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d00e      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b84:	4bc2      	ldr	r3, [pc, #776]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	220c      	movs	r2, #12
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b08      	cmp	r3, #8
 8000b8e:	d117      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x68>
 8000b90:	4bbf      	ldr	r3, [pc, #764]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	23c0      	movs	r3, #192	; 0xc0
 8000b96:	025b      	lsls	r3, r3, #9
 8000b98:	401a      	ands	r2, r3
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	025b      	lsls	r3, r3, #9
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d10e      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba2:	4bbb      	ldr	r3, [pc, #748]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	029b      	lsls	r3, r3, #10
 8000baa:	4013      	ands	r3, r2
 8000bac:	d100      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x58>
 8000bae:	e071      	b.n	8000c94 <HAL_RCC_OscConfig+0x13c>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d000      	beq.n	8000bba <HAL_RCC_OscConfig+0x62>
 8000bb8:	e06c      	b.n	8000c94 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f000 fb4c 	bl	8001258 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d107      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x80>
 8000bc8:	4bb1      	ldr	r3, [pc, #708]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4bb0      	ldr	r3, [pc, #704]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	0249      	lsls	r1, r1, #9
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e02f      	b.n	8000c38 <HAL_RCC_OscConfig+0xe0>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d10c      	bne.n	8000bfa <HAL_RCC_OscConfig+0xa2>
 8000be0:	4bab      	ldr	r3, [pc, #684]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4baa      	ldr	r3, [pc, #680]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000be6:	49ab      	ldr	r1, [pc, #684]	; (8000e94 <HAL_RCC_OscConfig+0x33c>)
 8000be8:	400a      	ands	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	4ba8      	ldr	r3, [pc, #672]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4ba7      	ldr	r3, [pc, #668]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000bf2:	49a9      	ldr	r1, [pc, #676]	; (8000e98 <HAL_RCC_OscConfig+0x340>)
 8000bf4:	400a      	ands	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	e01e      	b.n	8000c38 <HAL_RCC_OscConfig+0xe0>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	d10e      	bne.n	8000c20 <HAL_RCC_OscConfig+0xc8>
 8000c02:	4ba3      	ldr	r3, [pc, #652]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4ba2      	ldr	r3, [pc, #648]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	02c9      	lsls	r1, r1, #11
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	4b9f      	ldr	r3, [pc, #636]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b9e      	ldr	r3, [pc, #632]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	0249      	lsls	r1, r1, #9
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	e00b      	b.n	8000c38 <HAL_RCC_OscConfig+0xe0>
 8000c20:	4b9b      	ldr	r3, [pc, #620]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b9a      	ldr	r3, [pc, #616]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c26:	499b      	ldr	r1, [pc, #620]	; (8000e94 <HAL_RCC_OscConfig+0x33c>)
 8000c28:	400a      	ands	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	4b98      	ldr	r3, [pc, #608]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b97      	ldr	r3, [pc, #604]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c32:	4999      	ldr	r1, [pc, #612]	; (8000e98 <HAL_RCC_OscConfig+0x340>)
 8000c34:	400a      	ands	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d014      	beq.n	8000c6a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c40:	f7ff fc74 	bl	800052c <HAL_GetTick>
 8000c44:	0003      	movs	r3, r0
 8000c46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c48:	e008      	b.n	8000c5c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c4a:	f7ff fc6f 	bl	800052c <HAL_GetTick>
 8000c4e:	0002      	movs	r2, r0
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2b64      	cmp	r3, #100	; 0x64
 8000c56:	d901      	bls.n	8000c5c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e2fd      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5c:	4b8c      	ldr	r3, [pc, #560]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	029b      	lsls	r3, r3, #10
 8000c64:	4013      	ands	r3, r2
 8000c66:	d0f0      	beq.n	8000c4a <HAL_RCC_OscConfig+0xf2>
 8000c68:	e015      	b.n	8000c96 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6a:	f7ff fc5f 	bl	800052c <HAL_GetTick>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fc5a 	bl	800052c <HAL_GetTick>
 8000c78:	0002      	movs	r2, r0
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	; 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e2e8      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	4b82      	ldr	r3, [pc, #520]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	029b      	lsls	r3, r3, #10
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d1f0      	bne.n	8000c74 <HAL_RCC_OscConfig+0x11c>
 8000c92:	e000      	b.n	8000c96 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c94:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d100      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x14a>
 8000ca0:	e06c      	b.n	8000d7c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ca2:	4b7b      	ldr	r3, [pc, #492]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	4013      	ands	r3, r2
 8000caa:	d00e      	beq.n	8000cca <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cac:	4b78      	ldr	r3, [pc, #480]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	2b08      	cmp	r3, #8
 8000cb6:	d11f      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x1a0>
 8000cb8:	4b75      	ldr	r3, [pc, #468]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	23c0      	movs	r3, #192	; 0xc0
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d116      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cca:	4b71      	ldr	r3, [pc, #452]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2202      	movs	r2, #2
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d005      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x188>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d001      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e2bb      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce0:	4b6b      	ldr	r3, [pc, #428]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	22f8      	movs	r2, #248	; 0xf8
 8000ce6:	4393      	bics	r3, r2
 8000ce8:	0019      	movs	r1, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	691b      	ldr	r3, [r3, #16]
 8000cee:	00da      	lsls	r2, r3, #3
 8000cf0:	4b67      	ldr	r3, [pc, #412]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf6:	e041      	b.n	8000d7c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d024      	beq.n	8000d4a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d00:	4b63      	ldr	r3, [pc, #396]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b62      	ldr	r3, [pc, #392]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fc0e 	bl	800052c <HAL_GetTick>
 8000d10:	0003      	movs	r3, r0
 8000d12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d16:	f7ff fc09 	bl	800052c <HAL_GetTick>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e297      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d28:	4b59      	ldr	r3, [pc, #356]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d0f1      	beq.n	8000d16 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d32:	4b57      	ldr	r3, [pc, #348]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	22f8      	movs	r2, #248	; 0xf8
 8000d38:	4393      	bics	r3, r2
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	00da      	lsls	r2, r3, #3
 8000d42:	4b53      	ldr	r3, [pc, #332]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d44:	430a      	orrs	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e018      	b.n	8000d7c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d4a:	4b51      	ldr	r3, [pc, #324]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b50      	ldr	r3, [pc, #320]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	438a      	bics	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d56:	f7ff fbe9 	bl	800052c <HAL_GetTick>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d60:	f7ff fbe4 	bl	800052c <HAL_GetTick>
 8000d64:	0002      	movs	r2, r0
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e272      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	4b47      	ldr	r3, [pc, #284]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2202      	movs	r2, #2
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d1f1      	bne.n	8000d60 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2208      	movs	r2, #8
 8000d82:	4013      	ands	r3, r2
 8000d84:	d036      	beq.n	8000df4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d019      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d8e:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d92:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d94:	2101      	movs	r1, #1
 8000d96:	430a      	orrs	r2, r1
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d9a:	f7ff fbc7 	bl	800052c <HAL_GetTick>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da4:	f7ff fbc2 	bl	800052c <HAL_GetTick>
 8000da8:	0002      	movs	r2, r0
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e250      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dba:	2202      	movs	r2, #2
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d0f1      	beq.n	8000da4 <HAL_RCC_OscConfig+0x24c>
 8000dc0:	e018      	b.n	8000df4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dc2:	4b33      	ldr	r3, [pc, #204]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	438a      	bics	r2, r1
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dce:	f7ff fbad 	bl	800052c <HAL_GetTick>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd8:	f7ff fba8 	bl	800052c <HAL_GetTick>
 8000ddc:	0002      	movs	r2, r0
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e236      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dea:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	2202      	movs	r2, #2
 8000df0:	4013      	ands	r3, r2
 8000df2:	d1f1      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2204      	movs	r2, #4
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d100      	bne.n	8000e00 <HAL_RCC_OscConfig+0x2a8>
 8000dfe:	e0b5      	b.n	8000f6c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e00:	231f      	movs	r3, #31
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e0a:	69da      	ldr	r2, [r3, #28]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	055b      	lsls	r3, r3, #21
 8000e10:	4013      	ands	r3, r2
 8000e12:	d111      	bne.n	8000e38 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e16:	69da      	ldr	r2, [r3, #28]
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	0549      	lsls	r1, r1, #21
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	61da      	str	r2, [r3, #28]
 8000e22:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e24:	69da      	ldr	r2, [r3, #28]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	055b      	lsls	r3, r3, #21
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e30:	231f      	movs	r3, #31
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_RCC_OscConfig+0x344>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4013      	ands	r3, r2
 8000e42:	d11a      	bne.n	8000e7a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_RCC_OscConfig+0x344>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_RCC_OscConfig+0x344>)
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	0049      	lsls	r1, r1, #1
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e52:	f7ff fb6b 	bl	800052c <HAL_GetTick>
 8000e56:	0003      	movs	r3, r0
 8000e58:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e5c:	f7ff fb66 	bl	800052c <HAL_GetTick>
 8000e60:	0002      	movs	r2, r0
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b64      	cmp	r3, #100	; 0x64
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e1f4      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_RCC_OscConfig+0x344>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4013      	ands	r3, r2
 8000e78:	d0f0      	beq.n	8000e5c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d10e      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x348>
 8000e82:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e84:	6a1a      	ldr	r2, [r3, #32]
 8000e86:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	621a      	str	r2, [r3, #32]
 8000e8e:	e035      	b.n	8000efc <HAL_RCC_OscConfig+0x3a4>
 8000e90:	40021000 	.word	0x40021000
 8000e94:	fffeffff 	.word	0xfffeffff
 8000e98:	fffbffff 	.word	0xfffbffff
 8000e9c:	40007000 	.word	0x40007000
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10c      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x36a>
 8000ea8:	4bca      	ldr	r3, [pc, #808]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000eaa:	6a1a      	ldr	r2, [r3, #32]
 8000eac:	4bc9      	ldr	r3, [pc, #804]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	438a      	bics	r2, r1
 8000eb2:	621a      	str	r2, [r3, #32]
 8000eb4:	4bc7      	ldr	r3, [pc, #796]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000eb6:	6a1a      	ldr	r2, [r3, #32]
 8000eb8:	4bc6      	ldr	r3, [pc, #792]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000eba:	2104      	movs	r1, #4
 8000ebc:	438a      	bics	r2, r1
 8000ebe:	621a      	str	r2, [r3, #32]
 8000ec0:	e01c      	b.n	8000efc <HAL_RCC_OscConfig+0x3a4>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x38c>
 8000eca:	4bc2      	ldr	r3, [pc, #776]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000ecc:	6a1a      	ldr	r2, [r3, #32]
 8000ece:	4bc1      	ldr	r3, [pc, #772]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	621a      	str	r2, [r3, #32]
 8000ed6:	4bbf      	ldr	r3, [pc, #764]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000ed8:	6a1a      	ldr	r2, [r3, #32]
 8000eda:	4bbe      	ldr	r3, [pc, #760]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	621a      	str	r2, [r3, #32]
 8000ee2:	e00b      	b.n	8000efc <HAL_RCC_OscConfig+0x3a4>
 8000ee4:	4bbb      	ldr	r3, [pc, #748]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000ee6:	6a1a      	ldr	r2, [r3, #32]
 8000ee8:	4bba      	ldr	r3, [pc, #744]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	438a      	bics	r2, r1
 8000eee:	621a      	str	r2, [r3, #32]
 8000ef0:	4bb8      	ldr	r3, [pc, #736]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000ef2:	6a1a      	ldr	r2, [r3, #32]
 8000ef4:	4bb7      	ldr	r3, [pc, #732]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	438a      	bics	r2, r1
 8000efa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d014      	beq.n	8000f2e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fb12 	bl	800052c <HAL_GetTick>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f0c:	e009      	b.n	8000f22 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0e:	f7ff fb0d 	bl	800052c <HAL_GetTick>
 8000f12:	0002      	movs	r2, r0
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	4aaf      	ldr	r2, [pc, #700]	; (80011d8 <HAL_RCC_OscConfig+0x680>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e19a      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f22:	4bac      	ldr	r3, [pc, #688]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	2202      	movs	r2, #2
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d0f0      	beq.n	8000f0e <HAL_RCC_OscConfig+0x3b6>
 8000f2c:	e013      	b.n	8000f56 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fafd 	bl	800052c <HAL_GetTick>
 8000f32:	0003      	movs	r3, r0
 8000f34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f36:	e009      	b.n	8000f4c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f38:	f7ff faf8 	bl	800052c <HAL_GetTick>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	4aa5      	ldr	r2, [pc, #660]	; (80011d8 <HAL_RCC_OscConfig+0x680>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e185      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f4c:	4ba1      	ldr	r3, [pc, #644]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	2202      	movs	r2, #2
 8000f52:	4013      	ands	r3, r2
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f56:	231f      	movs	r3, #31
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d105      	bne.n	8000f6c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f60:	4b9c      	ldr	r3, [pc, #624]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000f62:	69da      	ldr	r2, [r3, #28]
 8000f64:	4b9b      	ldr	r3, [pc, #620]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000f66:	499d      	ldr	r1, [pc, #628]	; (80011dc <HAL_RCC_OscConfig+0x684>)
 8000f68:	400a      	ands	r2, r1
 8000f6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2210      	movs	r2, #16
 8000f72:	4013      	ands	r3, r2
 8000f74:	d063      	beq.n	800103e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d12a      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f7e:	4b95      	ldr	r3, [pc, #596]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f82:	4b94      	ldr	r3, [pc, #592]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000f84:	2104      	movs	r1, #4
 8000f86:	430a      	orrs	r2, r1
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f8a:	4b92      	ldr	r3, [pc, #584]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f8e:	4b91      	ldr	r3, [pc, #580]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000f90:	2101      	movs	r1, #1
 8000f92:	430a      	orrs	r2, r1
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f96:	f7ff fac9 	bl	800052c <HAL_GetTick>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fa0:	f7ff fac4 	bl	800052c <HAL_GetTick>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e152      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fb2:	4b88      	ldr	r3, [pc, #544]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d0f1      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fbc:	4b85      	ldr	r3, [pc, #532]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc0:	22f8      	movs	r2, #248	; 0xf8
 8000fc2:	4393      	bics	r3, r2
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	00da      	lsls	r2, r3, #3
 8000fcc:	4b81      	ldr	r3, [pc, #516]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fd2:	e034      	b.n	800103e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	3305      	adds	r3, #5
 8000fda:	d111      	bne.n	8001000 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000fdc:	4b7d      	ldr	r3, [pc, #500]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe0:	4b7c      	ldr	r3, [pc, #496]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	438a      	bics	r2, r1
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fe8:	4b7a      	ldr	r3, [pc, #488]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fec:	22f8      	movs	r2, #248	; 0xf8
 8000fee:	4393      	bics	r3, r2
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	00da      	lsls	r2, r3, #3
 8000ff8:	4b76      	ldr	r3, [pc, #472]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ffe:	e01e      	b.n	800103e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001000:	4b74      	ldr	r3, [pc, #464]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001004:	4b73      	ldr	r3, [pc, #460]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001006:	2104      	movs	r1, #4
 8001008:	430a      	orrs	r2, r1
 800100a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800100c:	4b71      	ldr	r3, [pc, #452]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 800100e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001010:	4b70      	ldr	r3, [pc, #448]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001012:	2101      	movs	r1, #1
 8001014:	438a      	bics	r2, r1
 8001016:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001018:	f7ff fa88 	bl	800052c <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001022:	f7ff fa83 	bl	800052c <HAL_GetTick>
 8001026:	0002      	movs	r2, r0
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e111      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001034:	4b67      	ldr	r3, [pc, #412]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001038:	2202      	movs	r2, #2
 800103a:	4013      	ands	r3, r2
 800103c:	d1f1      	bne.n	8001022 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2220      	movs	r2, #32
 8001044:	4013      	ands	r3, r2
 8001046:	d05c      	beq.n	8001102 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001048:	4b62      	ldr	r3, [pc, #392]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	220c      	movs	r2, #12
 800104e:	4013      	ands	r3, r2
 8001050:	2b0c      	cmp	r3, #12
 8001052:	d00e      	beq.n	8001072 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001054:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	220c      	movs	r2, #12
 800105a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800105c:	2b08      	cmp	r3, #8
 800105e:	d114      	bne.n	800108a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001060:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	23c0      	movs	r3, #192	; 0xc0
 8001066:	025b      	lsls	r3, r3, #9
 8001068:	401a      	ands	r2, r3
 800106a:	23c0      	movs	r3, #192	; 0xc0
 800106c:	025b      	lsls	r3, r3, #9
 800106e:	429a      	cmp	r2, r3
 8001070:	d10b      	bne.n	800108a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001072:	4b58      	ldr	r3, [pc, #352]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	025b      	lsls	r3, r3, #9
 800107a:	4013      	ands	r3, r2
 800107c:	d040      	beq.n	8001100 <HAL_RCC_OscConfig+0x5a8>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d03c      	beq.n	8001100 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0e6      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d01b      	beq.n	80010ca <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001092:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001096:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	0249      	lsls	r1, r1, #9
 800109c:	430a      	orrs	r2, r1
 800109e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fa44 	bl	800052c <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010aa:	f7ff fa3f 	bl	800052c <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e0cd      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010bc:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 80010be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	025b      	lsls	r3, r3, #9
 80010c4:	4013      	ands	r3, r2
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x552>
 80010c8:	e01b      	b.n	8001102 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80010ca:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 80010cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 80010d0:	4943      	ldr	r1, [pc, #268]	; (80011e0 <HAL_RCC_OscConfig+0x688>)
 80010d2:	400a      	ands	r2, r1
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fa29 	bl	800052c <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010e0:	f7ff fa24 	bl	800052c <HAL_GetTick>
 80010e4:	0002      	movs	r2, r0
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e0b2      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80010f2:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 80010f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	025b      	lsls	r3, r3, #9
 80010fa:	4013      	ands	r3, r2
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x588>
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001100:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	2b00      	cmp	r3, #0
 8001108:	d100      	bne.n	800110c <HAL_RCC_OscConfig+0x5b4>
 800110a:	e0a4      	b.n	8001256 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	220c      	movs	r2, #12
 8001112:	4013      	ands	r3, r2
 8001114:	2b08      	cmp	r3, #8
 8001116:	d100      	bne.n	800111a <HAL_RCC_OscConfig+0x5c2>
 8001118:	e078      	b.n	800120c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	2b02      	cmp	r3, #2
 8001120:	d14c      	bne.n	80011bc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001128:	492e      	ldr	r1, [pc, #184]	; (80011e4 <HAL_RCC_OscConfig+0x68c>)
 800112a:	400a      	ands	r2, r1
 800112c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112e:	f7ff f9fd 	bl	800052c <HAL_GetTick>
 8001132:	0003      	movs	r3, r0
 8001134:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001138:	f7ff f9f8 	bl	800052c <HAL_GetTick>
 800113c:	0002      	movs	r2, r0
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e086      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	049b      	lsls	r3, r3, #18
 8001152:	4013      	ands	r3, r2
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	220f      	movs	r2, #15
 800115c:	4393      	bics	r3, r2
 800115e:	0019      	movs	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001166:	430a      	orrs	r2, r1
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <HAL_RCC_OscConfig+0x690>)
 8001170:	4013      	ands	r3, r2
 8001172:	0019      	movs	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	431a      	orrs	r2, r3
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001180:	430a      	orrs	r2, r1
 8001182:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 800118a:	2180      	movs	r1, #128	; 0x80
 800118c:	0449      	lsls	r1, r1, #17
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff f9cb 	bl	800052c <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119c:	f7ff f9c6 	bl	800052c <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e054      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	049b      	lsls	r3, r3, #18
 80011b6:	4013      	ands	r3, r2
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x644>
 80011ba:	e04c      	b.n	8001256 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <HAL_RCC_OscConfig+0x68c>)
 80011c4:	400a      	ands	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff f9b0 	bl	800052c <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d0:	e015      	b.n	80011fe <HAL_RCC_OscConfig+0x6a6>
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	40021000 	.word	0x40021000
 80011d8:	00001388 	.word	0x00001388
 80011dc:	efffffff 	.word	0xefffffff
 80011e0:	fffeffff 	.word	0xfffeffff
 80011e4:	feffffff 	.word	0xfeffffff
 80011e8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ec:	f7ff f99e 	bl	800052c <HAL_GetTick>
 80011f0:	0002      	movs	r2, r0
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e02c      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_RCC_OscConfig+0x708>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	049b      	lsls	r3, r3, #18
 8001206:	4013      	ands	r3, r2
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x694>
 800120a:	e024      	b.n	8001256 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e01f      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_RCC_OscConfig+0x708>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_RCC_OscConfig+0x708>)
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	23c0      	movs	r3, #192	; 0xc0
 8001228:	025b      	lsls	r3, r3, #9
 800122a:	401a      	ands	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	429a      	cmp	r2, r3
 8001232:	d10e      	bne.n	8001252 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	220f      	movs	r2, #15
 8001238:	401a      	ands	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	429a      	cmp	r2, r3
 8001240:	d107      	bne.n	8001252 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	23f0      	movs	r3, #240	; 0xf0
 8001246:	039b      	lsls	r3, r3, #14
 8001248:	401a      	ands	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800124e:	429a      	cmp	r2, r3
 8001250:	d001      	beq.n	8001256 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b008      	add	sp, #32
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0bf      	b.n	80013f8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001278:	4b61      	ldr	r3, [pc, #388]	; (8001400 <HAL_RCC_ClockConfig+0x19c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	4013      	ands	r3, r2
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d911      	bls.n	80012aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b5e      	ldr	r3, [pc, #376]	; (8001400 <HAL_RCC_ClockConfig+0x19c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	4393      	bics	r3, r2
 800128e:	0019      	movs	r1, r3
 8001290:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <HAL_RCC_ClockConfig+0x19c>)
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001298:	4b59      	ldr	r3, [pc, #356]	; (8001400 <HAL_RCC_ClockConfig+0x19c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	4013      	ands	r3, r2
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0a6      	b.n	80013f8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	d015      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2204      	movs	r2, #4
 80012ba:	4013      	ands	r3, r2
 80012bc:	d006      	beq.n	80012cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012be:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4b50      	ldr	r3, [pc, #320]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 80012c4:	21e0      	movs	r1, #224	; 0xe0
 80012c6:	00c9      	lsls	r1, r1, #3
 80012c8:	430a      	orrs	r2, r1
 80012ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012cc:	4b4d      	ldr	r3, [pc, #308]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	22f0      	movs	r2, #240	; 0xf0
 80012d2:	4393      	bics	r3, r2
 80012d4:	0019      	movs	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 80012dc:	430a      	orrs	r2, r1
 80012de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4013      	ands	r3, r2
 80012e8:	d04c      	beq.n	8001384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b44      	ldr	r3, [pc, #272]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	029b      	lsls	r3, r3, #10
 80012fa:	4013      	ands	r3, r2
 80012fc:	d120      	bne.n	8001340 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e07a      	b.n	80013f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130a:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	049b      	lsls	r3, r3, #18
 8001312:	4013      	ands	r3, r2
 8001314:	d114      	bne.n	8001340 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e06e      	b.n	80013f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 8001324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	025b      	lsls	r3, r3, #9
 800132a:	4013      	ands	r3, r2
 800132c:	d108      	bne.n	8001340 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e062      	b.n	80013f8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e05b      	b.n	80013f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	4393      	bics	r3, r2
 8001348:	0019      	movs	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001354:	f7ff f8ea 	bl	800052c <HAL_GetTick>
 8001358:	0003      	movs	r3, r0
 800135a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135c:	e009      	b.n	8001372 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135e:	f7ff f8e5 	bl	800052c <HAL_GetTick>
 8001362:	0002      	movs	r2, r0
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	4a27      	ldr	r2, [pc, #156]	; (8001408 <HAL_RCC_ClockConfig+0x1a4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e042      	b.n	80013f8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	220c      	movs	r2, #12
 8001378:	401a      	ands	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	429a      	cmp	r2, r3
 8001382:	d1ec      	bne.n	800135e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_RCC_ClockConfig+0x19c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2201      	movs	r2, #1
 800138a:	4013      	ands	r3, r2
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d211      	bcs.n	80013b6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_RCC_ClockConfig+0x19c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2201      	movs	r2, #1
 8001398:	4393      	bics	r3, r2
 800139a:	0019      	movs	r1, r3
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_RCC_ClockConfig+0x19c>)
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_RCC_ClockConfig+0x19c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2201      	movs	r2, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e020      	b.n	80013f8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2204      	movs	r2, #4
 80013bc:	4013      	ands	r3, r2
 80013be:	d009      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_RCC_ClockConfig+0x1a8>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013d4:	f000 f820 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 80013d8:	0001      	movs	r1, r0
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_RCC_ClockConfig+0x1a0>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	220f      	movs	r2, #15
 80013e2:	4013      	ands	r3, r2
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_RCC_ClockConfig+0x1ac>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	000a      	movs	r2, r1
 80013ea:	40da      	lsrs	r2, r3
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_ClockConfig+0x1b0>)
 80013ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff f855 	bl	80004a0 <HAL_InitTick>
  
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b004      	add	sp, #16
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40022000 	.word	0x40022000
 8001404:	40021000 	.word	0x40021000
 8001408:	00001388 	.word	0x00001388
 800140c:	fffff8ff 	.word	0xfffff8ff
 8001410:	080015a4 	.word	0x080015a4
 8001414:	20000000 	.word	0x20000000

08001418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b08f      	sub	sp, #60	; 0x3c
 800141c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800141e:	2314      	movs	r3, #20
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	4a37      	ldr	r2, [pc, #220]	; (8001500 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001424:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001426:	c313      	stmia	r3!, {r0, r1, r4}
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4a35      	ldr	r2, [pc, #212]	; (8001504 <HAL_RCC_GetSysClockFreq+0xec>)
 8001430:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001432:	c313      	stmia	r3!, {r0, r1, r4}
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_RCC_GetSysClockFreq+0xf0>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	220c      	movs	r2, #12
 8001456:	4013      	ands	r3, r2
 8001458:	2b08      	cmp	r3, #8
 800145a:	d006      	beq.n	800146a <HAL_RCC_GetSysClockFreq+0x52>
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d043      	beq.n	80014e8 <HAL_RCC_GetSysClockFreq+0xd0>
 8001460:	2b04      	cmp	r3, #4
 8001462:	d144      	bne.n	80014ee <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001468:	e044      	b.n	80014f4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146c:	0c9b      	lsrs	r3, r3, #18
 800146e:	220f      	movs	r2, #15
 8001470:	4013      	ands	r3, r2
 8001472:	2214      	movs	r2, #20
 8001474:	18ba      	adds	r2, r7, r2
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_RCC_GetSysClockFreq+0xf0>)
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	220f      	movs	r2, #15
 8001480:	4013      	ands	r3, r2
 8001482:	1d3a      	adds	r2, r7, #4
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800148a:	23c0      	movs	r3, #192	; 0xc0
 800148c:	025b      	lsls	r3, r3, #9
 800148e:	401a      	ands	r2, r3
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	429a      	cmp	r2, r3
 8001496:	d109      	bne.n	80014ac <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800149a:	481c      	ldr	r0, [pc, #112]	; (800150c <HAL_RCC_GetSysClockFreq+0xf4>)
 800149c:	f7fe fe34 	bl	8000108 <__udivsi3>
 80014a0:	0003      	movs	r3, r0
 80014a2:	001a      	movs	r2, r3
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	4353      	muls	r3, r2
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
 80014aa:	e01a      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80014ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ae:	23c0      	movs	r3, #192	; 0xc0
 80014b0:	025b      	lsls	r3, r3, #9
 80014b2:	401a      	ands	r2, r3
 80014b4:	23c0      	movs	r3, #192	; 0xc0
 80014b6:	025b      	lsls	r3, r3, #9
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d109      	bne.n	80014d0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014be:	4814      	ldr	r0, [pc, #80]	; (8001510 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014c0:	f7fe fe22 	bl	8000108 <__udivsi3>
 80014c4:	0003      	movs	r3, r0
 80014c6:	001a      	movs	r2, r3
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	4353      	muls	r3, r2
 80014cc:	637b      	str	r3, [r7, #52]	; 0x34
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014d2:	480e      	ldr	r0, [pc, #56]	; (800150c <HAL_RCC_GetSysClockFreq+0xf4>)
 80014d4:	f7fe fe18 	bl	8000108 <__udivsi3>
 80014d8:	0003      	movs	r3, r0
 80014da:	001a      	movs	r2, r3
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	4353      	muls	r3, r2
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80014e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014e6:	e005      	b.n	80014f4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014ec:	e002      	b.n	80014f4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_RCC_GetSysClockFreq+0xf4>)
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b00f      	add	sp, #60	; 0x3c
 80014fc:	bd90      	pop	{r4, r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	08001584 	.word	0x08001584
 8001504:	08001594 	.word	0x08001594
 8001508:	40021000 	.word	0x40021000
 800150c:	007a1200 	.word	0x007a1200
 8001510:	02dc6c00 	.word	0x02dc6c00

08001514 <__libc_init_array>:
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	2600      	movs	r6, #0
 8001518:	4d0c      	ldr	r5, [pc, #48]	; (800154c <__libc_init_array+0x38>)
 800151a:	4c0d      	ldr	r4, [pc, #52]	; (8001550 <__libc_init_array+0x3c>)
 800151c:	1b64      	subs	r4, r4, r5
 800151e:	10a4      	asrs	r4, r4, #2
 8001520:	42a6      	cmp	r6, r4
 8001522:	d109      	bne.n	8001538 <__libc_init_array+0x24>
 8001524:	2600      	movs	r6, #0
 8001526:	f000 f821 	bl	800156c <_init>
 800152a:	4d0a      	ldr	r5, [pc, #40]	; (8001554 <__libc_init_array+0x40>)
 800152c:	4c0a      	ldr	r4, [pc, #40]	; (8001558 <__libc_init_array+0x44>)
 800152e:	1b64      	subs	r4, r4, r5
 8001530:	10a4      	asrs	r4, r4, #2
 8001532:	42a6      	cmp	r6, r4
 8001534:	d105      	bne.n	8001542 <__libc_init_array+0x2e>
 8001536:	bd70      	pop	{r4, r5, r6, pc}
 8001538:	00b3      	lsls	r3, r6, #2
 800153a:	58eb      	ldr	r3, [r5, r3]
 800153c:	4798      	blx	r3
 800153e:	3601      	adds	r6, #1
 8001540:	e7ee      	b.n	8001520 <__libc_init_array+0xc>
 8001542:	00b3      	lsls	r3, r6, #2
 8001544:	58eb      	ldr	r3, [r5, r3]
 8001546:	4798      	blx	r3
 8001548:	3601      	adds	r6, #1
 800154a:	e7f2      	b.n	8001532 <__libc_init_array+0x1e>
 800154c:	080015b4 	.word	0x080015b4
 8001550:	080015b4 	.word	0x080015b4
 8001554:	080015b4 	.word	0x080015b4
 8001558:	080015b8 	.word	0x080015b8

0800155c <memset>:
 800155c:	0003      	movs	r3, r0
 800155e:	1812      	adds	r2, r2, r0
 8001560:	4293      	cmp	r3, r2
 8001562:	d100      	bne.n	8001566 <memset+0xa>
 8001564:	4770      	bx	lr
 8001566:	7019      	strb	r1, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	e7f9      	b.n	8001560 <memset+0x4>

0800156c <_init>:
 800156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001572:	bc08      	pop	{r3}
 8001574:	469e      	mov	lr, r3
 8001576:	4770      	bx	lr

08001578 <_fini>:
 8001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157e:	bc08      	pop	{r3}
 8001580:	469e      	mov	lr, r3
 8001582:	4770      	bx	lr
